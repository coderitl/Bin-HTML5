// 使用 student 数据库
use student;
// 查看当前使用数据库
db;
// 查看集合
show collections;
// 查看 test 集合中的数据
db.test.find();
db.emp.find();

// 创建集合 emp
db.createCollection('emp');

// 删除集合

// 集合插入多条数据 db.collection-name.insert({})
db.emp.insert([
    {
        name: "张三",
        age: 20,
        gender: "男"
    },
    {
        name: "李四",
        age: 18,
        gender: "女"
    },
    {
        name: "王五",
        age: 10,
        gender: "男"
    },
    {
        name: "王麻子",
        age: 38,
        gender: "男"
    }
]);

// 快速输出 10 条数据 支持 js 语法
for (var i = 0; i < 10; i++) {
    print(i);
}
// 在指定集合中快速插入 n 条数据
// for 循环是一条一条插入,前 n 条数据提示不可见m最后一条提示可以出现 
for (var i = 0; i < 10; i++) {
    db.dept.insert({
        deptno: "deptno" + i,
        age: i + 1
    });
}
// 查询集合结果
show collections;
// 查询结果集
db.dept.find();


// 显示当前使用的数据库名称
db;
// 查询集合
show collections;

// _id 无论怎么都会出现
// 查询某集合中的所有数据的数据
db.dept.find({});


// 根据条件查询 查 age 大于 5 的数据
db.dept.find({
    age: {
        $gt: 5
    }
});


// 只显示 age 列数据
db.dept.find({}, {
    age: 1
});

// 显示所有 非 age  列数据
db.dept.find({}, {
    age: 0
});

// 特定范围内 Eg. 6 9 10
db.dept.find({
    age: {
        $in: [6, 9, 10]
    }
});


// 创建新集合
db.createCollection('testInfo');

// 查询已有集合
show collections;

// 通过 for 循环插入 n 条测试数据
for (var i = 0; i < 10; i++) {
    db.testInfo.insert({
        name: "name" + i,
        age: i + 1
    });
}

// 查询 testInfo 中的数据
db.testInfo.find();

// 将 name: "name0" 改为 name: "name11"
// 替换操作 并不能实现数据修改
db.testInfo.update({
    name: "name0"
}, {
    name: "name11"
});


// 将 name: "name10" 改为 name: "name01"
db.testInfo.update({
    name: "name10"
}, {
    $set: {
        name: "name01"
    }
});


// 修改 name:name4 age:5 修改为 name:"name04",age:40
db.testInfo.update({
    name: "name4",
    age: 5
}, {
    $set: {
        name: "name04",
        age: 40
    }
});


// 据条件 name:"name01",对数据进行 `+5/-5`

db.testInfo.find({
    name: "name01"
}, {
    $inc: {
        age: 5
    }
});


// 练习所有操作符 $inc 递增,$rename 重命名,$set 修改列的值, $unset 删除列
// 在 optionA 中插入一条数据
db.optionA.insert({
    name: "name12",
    age: 12,
    score: 99,
    object: "MongoDB"
});
// $inc
db.optionA.update({
    name: "name12"
}, {
    $inc: {
        age:  - 2
    }
});
// $rename
db.optionA.update({
    name: "name12"
}, {
    $rename: {
        score: "grades"
    }
});
// $set
db.optionA.update({
    name: "name12"
}, {
    $set: {
        grades: 89
    }
});
// $unset
db.optionA.update({
    name: "name12"
}, {
    $unset: {
        object: "MongoDB"
    }
});

db.testInfo.find();
// update: > true false


db.testInfo.update({
    name: "name20",
    age: 5
}, {
    $set: {
        name: "name04",
        age: 40
    }
}, true);


// 是否修改多条数据 默认 false 不修改
db.testInfo.update({name:"name2"},{$set:{age:22}},false,true);




// 删除集合 db.collection-name.drop();
db.testInfo.drop(); // 删除成功显示 true

// 使用(隐式创建该) 数据库
use school;
// 创建集合
db.createCollection('stu');
// 添加集合字段

// 集合字段: 编号 学号 姓名 电话 性别 年龄 学历 备注
for (var num = 0; num < 20; num++) {
    db.stu.insert([
        {
            uid: num,
            no: "MakaBaka" + num,
            uname: "MongoDB" + num,
            tel: "12345678901",
            sex: "女",
            age: num,
            school: "研究生",
            remark: "learning mongodb day02"
        }
    ])
};
// 查询 stu 集合数据
db.stu.find().pretty();


// 删除 school 集合
db.school.drop();

// -------------------------------------------------------------
use test3;
db.c1.insert({_id:1,name:"a",sex:1,age:1});
db.c1.insert({_id:2,name:"a",sex:1,age:2});
db.c1.insert({_id:3,name:"b",sex:2,age:3});
db.c1.insert({_id:4,name:"c",sex:2,age:4});
db.c1.insert({_id:5,name:"d",sex:2,age:5});

db.c1.find();

// 排序 -1降 1升

// 对 age 列进行降序输出，发现所有列都进行了降序输出
db.c1.find().sort({age: -1});
db.c1.find().sort({age: 1});

// 分页  [skip 第一页不需要跳过] 跳过 2 条 查看 3 条数据 

// 查看后 3 条数据
db.c1.find().skip(2).limit(3);
// 查询前 3 条数据 
db.c1.find().skip().limit(3);












